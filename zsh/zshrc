# If you come from bash you might have to change your $PATH.
# export PATH=$HOME/bin:/usr/local/bin:$PATH

# Path to your oh-my-zsh installation.
export ZSH="$HOME/.oh-my-zsh"

# Set name of the theme to load --- if set to "random", it will
# load a random theme each time oh-my-zsh is loaded, in which case,
# to know which specific one was loaded, run: echo $RANDOM_THEME
# See https://github.com/ohmyzsh/ohmyzsh/wiki/Themes
ZSH_THEME="robbyrussell"

# Disable warning for folders that are now owned by me (happens when some folders are owned by
# company admin...)
ZSH_DISABLE_COMPFIX="true"

# Set list of themes to pick from when loading at random
# Setting this variable when ZSH_THEME=random will cause zsh to load
# a theme from this variable instead of looking in $ZSH/themes/
# If set to an empty array, this variable will have no effect.
# ZSH_THEME_RANDOM_CANDIDATES=( "robbyrussell" "agnoster" )

# Uncomment the following line to use case-sensitive completion.
# CASE_SENSITIVE="true"

# Uncomment the following line to use hyphen-insensitive completion.
# Case-sensitive completion must be off. _ and - will be interchangeable.
# HYPHEN_INSENSITIVE="true"

# Uncomment the following line to disable bi-weekly auto-update checks.
# DISABLE_AUTO_UPDATE="true"

# Uncomment the following line to automatically update without prompting.
# DISABLE_UPDATE_PROMPT="true"

# Uncomment the following line to change how often to auto-update (in days).
# export UPDATE_ZSH_DAYS=13

# Uncomment the following line if pasting URLs and other text is messed up.
# DISABLE_MAGIC_FUNCTIONS="true"

# Uncomment the following line to disable colors in ls.
# DISABLE_LS_COLORS="true"

# Uncomment the following line to disable auto-setting terminal title.
# DISABLE_AUTO_TITLE="true"

# Uncomment the following line to enable command auto-correction.
# ENABLE_CORRECTION="true"

# Uncomment the following line to display red dots whilst waiting for completion.
# COMPLETION_WAITING_DOTS="true"

# Uncomment the following line if you want to disable marking untracked files
# under VCS as dirty. This makes repository status check for large repositories
# much, much faster.
# DISABLE_UNTRACKED_FILES_DIRTY="true"

# Uncomment the following line if you want to change the command execution time
# stamp shown in the history command output.
# You can set one of the optional three formats:
# "mm/dd/yyyy"|"dd.mm.yyyy"|"yyyy-mm-dd"
# or set a custom format using the strftime function format specifications,
# see 'man strftime' for details.
# HIST_STAMPS="mm/dd/yyyy"

# Would you like to use another custom folder than $ZSH/custom?
# ZSH_CUSTOM=/path/to/new-custom-folder

# Which plugins would you like to load?
# Standard plugins can be found in $ZSH/plugins/
# Custom plugins may be added to $ZSH_CUSTOM/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
# Add wisely, as too many plugins slow down shell startup.
plugins=(git vi-mode ssh-agent)
zstyle :omz:plugins:ssh-agent agent-forwarding on
zstyle :omz:plugins:ssh-agent identities id_rsa

source $ZSH/oh-my-zsh.sh

# User configuration

# export MANPATH="/usr/local/man:$MANPATH"

# You may need to manually set your language environment
# export LANG=en_US.UTF-8

# Preferred editor for local and remote sessions
# if [[ -n $SSH_CONNECTION ]]; then
#   export EDITOR='vim'
# else
#   export EDITOR='mvim'
# fi

# Compilation flags
# export ARCHFLAGS="-arch x86_64"

# Prompt
# One space here to make it work properly when the git prompt is empty
ZSH_THEME_GIT_PROMPT_PREFIX=" $FG[214]("
ZSH_THEME_GIT_PROMPT_SUFFIX="%{$reset_color%}"
ZSH_THEME_GIT_PROMPT_DIRTY="$FG[214]) %{$fg[red]%}*"
ZSH_THEME_GIT_PROMPT_CLEAN="$FG[214])"

PROMPT='%{$fg[red]%}@%m%{$reset_color%} '
PROMPT+='%{$fg_bold[blue]%}%~%{$reset_color%}'
PROMPT+='$(git_prompt_info) '
PROMPT+='%{$fg[green]%}$ %{$reset_color%}'

# Bind vim command mode to something more convenient than escape
bindkey jk vi-cmd-mode
# Search keybinds for command mode.
bindkey -M vicmd '?' history-incremental-search-backward
bindkey -M vicmd '/' history-incremental-search-forward
bindkey -M vicmd 'k' up-line-or-beginning-search
bindkey -M vicmd 'j' down-line-or-beginning-search


export VISUAL=vim
autoload edit-command-line; zle -N edit-command-line
bindkey -M vicmd v edit-command-line
# Set personal aliases, overriding those provided by oh-my-zsh libs,
# plugins, and themes. Aliases can be placed here, though oh-my-zsh
# users are encouraged to define aliases within the ZSH_CUSTOM folder.
# For a full list of active aliases, run `alias`.
#
# Example aliases
# Git
alias gs="git status"
alias ga="git add"
alias gcm="git commit -m"
alias gc="git checkout"
alias gp="git push"
alias gpl="git pull"
alias gb="git branch"
alias gd="git diff"

# Zsh
alias ez="vim ~/.zshrc"
alias sz="source ~/.zshrc"

# Kube
alias k="kubectl"
# get pods on node
kpods-on-node () {
  kubectl get pods --all-namespaces -o wide --field-selector spec.nodeName=$1
}

# get nodes for role
knodes-for-role () {
  kubectl get nodes -l node-role.kubernetes.io/$1='' ${@:2}

}

knodes-for-app () {
  kubectl get nodes -l app.kubernetes.io/name=$1 ${@:2}
}

# kills nodes using @david.benque's tool
kkill-nodes () {
  kubectl annotate nodes $1 nla.datadoghq.com/set-condition=application
}

# Display the pod names running on the argument node
function k8s-node-pods {
  local node_name=$1
  kubectl get pod --field-selector=spec.nodeName="$node_name"
}

# Stream the state of the pods deployed in a given application cluster
function k8s-cluster-w {
  local cluster=$1
  kubectl get pods -l cluster="$1" --sort-by='{.metadata.name}' -w
}

# List all application clusters in k8s
function k8s-app-clusters {
  local app=$1
  shift
  k get service -l app="$app" -o custom-columns='NAMESPACE:metadata.namespace,CLUSTER:metadata.labels.cluster' "$@" | sort | uniq
}

# Display the state of the pods deployed in a given application cluster
function k8s-cluster {
  local cluster=$1
  kubectl get pods -l cluster="$1" --sort-by='{.metadata.name}'
}

# Exec a command (bash by default) into a given pod
function k8s-podexec {
  kubectl exec -it "$1" -- "${2:-/bin/bash}"
}

function mvnt {
  local module=$1
  shift
  local toRun=$1
  shift
  set -x
  mvn test -pl "$module" -DfailIfNoTests=false -Dtest="$toRun" "$@"
  set +x
}

function mvni {
  local module=$1
  shift
  set -x
  mvn -T 0.5C install -pl "$module" -DskipTests "$@"
  set +x
}

export PATH="$HOME/.jenv/bin:$PATH"
eval "$(jenv init -)"

export LESS=-FRSX
if [ -r $HOME/dotfiles/zsh/local_zshrc ]; then
  source $HOME/dotfiles/zsh/local_zshrc
fi
if command -v pyenv 1>/dev/null 2>&1; then
  eval "$(pyenv init -)"
fi

# google-cloud-sdk brew caveat
if [ -r "/usr/local/Caskroom/google-cloud-sdk/latest/google-cloud-sdk/path.zsh.inc" ]; then
  source "/usr/local/Caskroom/google-cloud-sdk/latest/google-cloud-sdk/path.zsh.inc"
fi
if [ -r "/usr/local/Caskroom/google-cloud-sdk/latest/google-cloud-sdk/completion.zsh.inc" ]; then
  source "/usr/local/Caskroom/google-cloud-sdk/latest/google-cloud-sdk/completion.zsh.inc"
fi

export PYENV_ROOT="$HOME/.pyenv"
command -v pyenv >/dev/null || export PATH="$PYENV_ROOT/bin:$PATH"
eval "$(pyenv init -)"
# BEGIN ANSIBLE MANAGED BLOCK
# Add homebrew binaries to the path.
export PATH="/opt/homebrew/bin:/opt/homebrew/sbin:${PATH?}"

# Force certain more-secure behaviours from homebrew
export HOMEBREW_NO_INSECURE_REDIRECT=1
export HOMEBREW_CASK_OPTS=--require-sha
export HOMEBREW_DIR=/opt/homebrew
export HOMEBREW_BIN=/opt/homebrew/bin

# Load python shims
eval "$(pyenv init -)"

# Load ruby shims
eval "$(rbenv init -)"

# Prefer GNU binaries to Macintosh binaries.
export PATH="/opt/homebrew/opt/coreutils/libexec/gnubin:${PATH}"

# Add AWS CLI to PATH
export PATH="/opt/homebrew/opt/awscli@1/bin:$PATH"

# Add datadog devtools binaries to the PATH
export PATH="${HOME?}/dd/devtools/bin:${PATH?}"

# Point GOPATH to our go sources
export GOPATH="${HOME?}/go"

# Add binaries that are go install-ed to PATH
export PATH="${GOPATH?}/bin:${PATH?}"

# Point DATADOG_ROOT to ~/dd symlink
export DATADOG_ROOT="${HOME?}/dd"

# Tell the devenv vm to mount $GOPATH/src rather than just dd-go
export MOUNT_ALL_GO_SRC=1

# store key in the login keychain instead of aws-vault managing a hidden keychain
export AWS_VAULT_KEYCHAIN_NAME=login

# tweak session times so you don't have to re-enter passwords every 5min
export AWS_SESSION_TTL=24h
export AWS_ASSUME_ROLE_TTL=1h

# Helm switch from storing objects in kubernetes configmaps to
# secrets by default, but we still use the old default.
export HELM_DRIVER=configmap

# Go 1.16+ sets GO111MODULE to off by default with the intention to
# remove it in Go 1.18, which breaks projects using the dep tool.
# https://blog.golang.org/go116-module-changes
export GO111MODULE=auto
export GOPRIVATE=github.com/DataDog
# END ANSIBLE MANAGED BLOCK
